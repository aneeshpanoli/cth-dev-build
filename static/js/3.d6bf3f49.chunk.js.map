{"version":3,"sources":["components/dashBoard/SolutionCard.jsx","components/dashBoard/SolutionForm.jsx","components/dashBoard/MicrotaskCard.jsx","components/dashBoard/MTPlaceHolder.jsx"],"names":["useStyles","makeStyles","theme","root","minWidth","border","borderRadius","media","maxHeight","maxWidth","minHeight","objectFit","avatar","backgroundColor","width","height","overlay","position","top","left","color","header","palette","primary","main","button","secondary","textTransform","textAlign","transform","chipGrey","chipGreen","safe","chipRed","danger","bullet","display","margin","SolutionCard","props","history","useHistory","dispatch","useDispatch","classes","useState","checked","mouseMoved","setMouseMoved","React","setUpvotes","setDownvotes","useTrackedState","authData","useEffect","r","_source","downvotes","upvotes","bull","className","timeout","in","key","_id","style","transitionDelay","Fragment","item","md","sm","xs","align","noW","marginRight","onMouseMove","onMouseDown","onMouseUp","selectedSolution","console","log","updateSelectedSolution","push","projTitle","replace","mtTitle","title","textDecoration","cursor","component","fontWeight","fontSize","variant","category","marginLeft","subtitle","size","selectedProject","chipRoot","justifyContent","flexWrap","listStyle","padding","spacing","chip","paper","marginTop","flexDirection","alignItems","form","marginBottom","submit","error","backdrop","zIndex","drawer","SolutionForm","formErrors","setFormErrors","user","open","setOpen","embed","setEmbed","image","setImage","newChips","setNewChips","builtWith","selectedMT","country","createdAt","Date","storyText","owners","id","video","hackathons","updatedAt","links","keywords","roles","mtId","projectTitle","projId","projectId","rewards","crisis","language","approved","completed","claimed","formValues","setFormValues","handleDeleteChip","objProp","newArr","filter","Object","assign","handleDeleteChipRoles","handleChange","event","field","target","value","handleChangeValue","values","errors","length","test","URL","slice","validate","map","role","i","label","onDelete","onClick","noValidate","onSubmit","e","preventDefault","container","required","fullWidth","multiline","name","autoComplete","onChange","onSave","url","file","path","reader","FileReader","onloadend","result","readAsDataURL","acceptedFiles","src","alt","borderBottom","controls","toolbarButtonSize","state","convertToHTML","styleToHTML","blockToHTML","block","type","entityToHTML","entity","originalText","data","href","getCurrentContent","options","categories","getOptionLabel","option","_","renderInput","params","includes","concat","onAdd","index","videoUrl","openForm","keys","status","q","formData","FormData","append","JSON","stringify","postProject","updateMicrotaskList","disabled","justify","paddingTop","bottom","pos"],"mappings":"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","file":"static/js/3.d6bf3f49.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { Typography, Grid } from \"@material-ui/core\";\nimport LongMenu from \"../menu/LongMenu\";\nimport { useDispatch, useTrackedState } from \"reactive-react-redux\";\nimport { updateSelectedSolution } from \"../redux/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { getImgUrl } from \"../js/utils\";\nimport Link from \"@material-ui/core/Link\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport Chip from \"@material-ui/core/Chip\";\nimport TurnedInNotOutlinedIcon from \"@material-ui/icons/TurnedInNotOutlined\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport MoneyIcon from \"@material-ui/icons/Money\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { IconButton, Button } from \"@material-ui/core\";\nimport ProjectSettings from \"./ProjectSettings\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: \"100%\",\n    border: \"1px solid #E8E8E8\",\n    borderRadius: 15,\n  },\n  media: {\n    maxHeight: \"auto\",\n    maxWidth: \"100%\",\n    minHeight: \"5rem\",\n    minWidth: \"5rem\",\n    objectFit: \"cover\",\n    borderRadius: 5,\n  },\n  avatar: {\n    backgroundColor: \"transparent\",\n    width: \"1.4rem\",\n    height: \"1.4rem\",\n  },\n  overlay: {\n    position: \"absolute\",\n    top: \"56.25%\",\n    left: \"1.2rem\",\n    color: \"black\",\n    backgroundColor: \"transparent\",\n  },\n  header: {\n    backgroundColor: theme.palette.primary.main,\n    color: \"white\",\n    height: \"0.2rem\",\n  },\n  button: {\n    borderRadius: 20,\n    backgroundColor: theme.palette.secondary.main,\n    textTransform: \"none\",\n    position: \"absolute\",\n    left: \"62%\",\n    textAlign: \"middle\",\n    transform: `translateX(-50%)`,\n    // bottom: \"0.8rem\",\n    width: \"8rem\",\n    // height: \"2.5rem\",\n  },\n  chipGrey: {\n    backgroundColor: \"silver\",\n  },\n  chipGreen: {\n    backgroundColor: theme.palette.safe,\n  },\n  chipRed: {\n    backgroundColor: theme.palette.danger,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n}));\n\nexport default function SolutionCard(props) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const [checked] = useState(true);\n  const [mouseMoved, setMouseMoved] = useState(false);\n  const [upvotes, setUpvotes] = React.useState([]);\n  const [downvotes, setDownvotes] = React.useState([]);\n  const { authData } = useTrackedState();\n\n  React.useEffect(() => {\n    if (props.r && props.r._source.downvotes) {\n      setDownvotes(props.r._source.downvotes);\n    }\n    if (props.r && props.r._source.upvotes) {\n      setUpvotes(props.r._source.upvotes);\n    }\n  }, [props]);\n\n  const percentLikes = () => {\n    if (upvotes.length && downvotes.length) {\n      return (\n        Math.round(\n          (upvotes.length / (upvotes.length + downvotes.length)) * 100\n        ) + \"%\"\n      );\n    } else if (upvotes.length && (!downvotes || !downvotes.length)) {\n      return \"100%\";\n    }\n    return \"0%\";\n  };\n\n  // console.log(r)\n  const handleLearnmore = (selectedSolution) => {\n    console.log(selectedSolution);\n    if (selectedSolution && !mouseMoved) {\n      dispatch(updateSelectedSolution(selectedSolution));\n\n      history.push(\n        \"/\" +\n          selectedSolution._source.projTitle.replace(/\\s+/g, \"-\") +\n          \"/\" +\n          selectedSolution._source.mtTitle.replace(/\\s+/g, \"-\") +\n          \"/\" +\n          selectedSolution._source.title.replace(/\\s+/g, \"-\") +\n          \"/\" +\n          selectedSolution._id\n      );\n    }\n  };\n\n  const makeChip = () => {\n    if (authData._source && upvotes.includes(authData._source.id)) {\n      return (\n        <Chip\n          className={classes.chipGreen}\n          size=\"small\"\n          icon={<ThumbUpIcon />}\n          label={percentLikes()}\n        />\n      );\n    } else if (authData._source && downvotes.includes(authData._source.id)) {\n      return (\n        <Chip\n          className={classes.chipRed}\n          size=\"small\"\n          icon={<ThumbUpIcon />}\n          label={percentLikes()}\n        />\n      );\n    } else {\n      return (\n        <Chip\n          className={classes.chipGrey}\n          size=\"small\"\n          icon={<ThumbUpIcon />}\n          label={percentLikes()}\n        />\n      );\n    }\n  };\n  const bull = <span className={classes.bullet}>•</span>;\n\n  return (\n    <Fade\n      timeout={600}\n      in={checked}\n      key={props.r._id}\n      style={{ transitionDelay: checked ? \"300ms\" : \"0ms\" }}\n    >\n      <React.Fragment>\n        <Grid item md={12} sm={12} xs={12} align=\"left\" noW>\n          <Grid item xs={12}>\n            <CheckBoxOutlineBlankIcon style={{ marginRight: \"1rem\" }} />\n            <Link\n              onMouseMove={() => setMouseMoved(true)}\n              onMouseDown={() => setMouseMoved(false)}\n              onMouseUp={() => handleLearnmore(props.r)}\n              style={{ textDecoration: \"none\", cursor: \"pointer\" }}\n            >\n              <Typography\n                component=\"span\"\n                style={{ fontWeight: 700, fontSize: \"1.2rem\" }}\n              >\n                {props.r._source.title} {bull}{\" \"}\n                <Typography variant=\"body2\" component=\"span\">\n                  {props.r._source.category ? props.r._source.category : null}\n                </Typography>\n              </Typography>\n            </Link>\n\n            <Typography style={{ marginLeft: \"2.5rem\" }}>\n              {/* {props.r._source.subtitle.substring(0, 125) + \"...\"} */}\n              {props.r._source.subtitle ? props.r._source.subtitle : null}\n            </Typography>\n            {/* <Button style={{marginLeft: \"1.5rem\", color:'green'}}>Solve</Button> */}\n            <IconButton\n              size=\"small\"\n              style={{ marginLeft: \"1rem\", color: \"silver\" }}\n            >\n              <TurnedInNotOutlinedIcon />\n            </IconButton>\n\n            <IconButton\n              size=\"small\"\n              style={{ marginLeft: \"auto 1.5rem\", color: \"silver\" }}\n            >\n              <MoneyIcon />\n            </IconButton>\n            <ProjectSettings\n              selectedProject={props.r}\n              style={{ marginLeft: \"auto 1.5rem\", color: \"silver\" }}\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <hr></hr>\n        </Grid>\n      </React.Fragment>\n    </Fade>\n  );\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useTrackedState } from \"reactive-react-redux\";\nimport { postProject } from \"../backend/AxiosRequest\";\nimport MUIRichTextEditor from \"mui-rte\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { countries, categories, roles } from \"../search/utils\";\nimport ImageUpload from \"../create/ImageUpload\";\nimport { convertToHTML } from \"draft-convert\";\nimport ChipInput from \"material-ui-chip-input\";\nimport Chip from \"@material-ui/core/Chip\";\nimport {updateMicrotaskList} from '../redux/actions'\n\nconst useStyles = makeStyles((theme) => ({\n  chipRoot: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n    variant: \"outlined\",\n    height: \"1.5rem\",\n    color: theme.palette.primary.main,\n    border: \"1px solid\",\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 1, 2),\n    maxWidth: \"8rem\",\n  },\n  error: {\n    color: \"red\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n}));\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.title) {\n    errors.title = \"Required\";\n  } else if (values.title.length < 4) {\n    errors.title = \"The title should be atleast 4 characters long\";\n  } else if (values.title.length > 60) {\n    errors.title = \"The title should be less than 60 characters\";\n  } else if (/[*._%+-?]+/i.test(values.title)) {\n    errors.title = \"Invalid characters in the title*\";\n  }\n\n  if (!values.subtitle) {\n    errors.subtitle = \"Required\";\n  } else if (values.subtitle.length < 60) {\n    errors.subtitle = \"The description should be atleast 60 characters long\";\n  }\n\n  // if (!values.motivation) {\n  //   errors.motivation = \"Required\";\n  // } else if (values.motivation.length < 60) {\n  //   errors.motivation = \"The description should be atleast 60 characters long\";\n  // }\n\n  if (!values.storyText) {\n    errors.storyText = \"Required\";\n  } else if (values.storyText.length < 60) {\n    errors.storyText = \"The description should be atleast 60 characters long\";\n  }\n\n  if (!values.category) {\n    errors.category = \"Required\";\n  }\n\n  if (values.roles.length === 0 || !values.roles) {\n    errors.roles = \"Required\";\n  }\n\n  if (values.links && values.links.length > 0) {\n    try {\n      new URL(values.links.slice(-1));\n    } catch (error) {\n      errors.links = \"Not a valid url\";\n    }\n  }\n\n  // if (values.video) {\n  //   try {\n  //     new URL(values.video);\n  //   } catch (error) {\n  //     errors.video = \"Not a valid url\";\n  //   }\n  // }\n\n  if (values.keywords.length === 0 || !values.keywords) {\n    errors.keywords = \"Required\";\n  }\n\n  if (values.builtWith.length === 0 || !values.builtWith) {\n    errors.builtWith = \"Required\";\n  }\n\n  // if (!values.country) {\n  //   errors.country = \"Required\";\n  // }\n\n  if (!values.image) {\n    errors.image = \"Required\";\n  }\n\n  return errors;\n};\n\nexport default function SolutionForm(props) {\n  const [formErrors, setFormErrors] = React.useState({});\n  const history = useHistory();\n  const classes = useStyles();\n  const { authData } = useTrackedState();\n  React.useEffect(() => {\n    if (!authData.user) {\n      history.push(\"/\");\n    }\n  });\n\n  const dispatch = useDispatch();\n  const [open, setOpen] = React.useState(false);\n  const [embed, setEmbed] = React.useState(null);\n  const [image, setImage] = React.useState(null);\n\n  const [newChips, setNewChips] = React.useState(null);\n  const [formValues, setFormValues] = React.useState({\n    builtWith: props.selectedMT._source.builtWith,\n    category: props.selectedMT._source.category,\n    country: \"\",\n    createdAt: new Date(),\n    storyText: \"\",\n    subtitle: \"\",\n    owners: authData && authData.user ? authData.user.id : \"\",\n    video: \"\",\n    hackathons: [],\n    updatedAt: new Date(),\n    links: [],\n    keywords: [],\n    title: \"\",\n    roles: [],\n    mtId: props.selectedMT._id,\n    mtTitle:props.selectedMT._source.title,\n    projTitle:props.selectedMT._source.projectTitle,\n    projId:props.selectedMT._source.projectId,\n    rewards: \"\",\n    crisis: \"\",\n    language: \"\",\n    approved: \"no\",\n    completed: \"no\",\n    claimed:\"yes\"\n  });\n\n  const makeChips = (values) => {\n    return (\n      <div className={classes.chipRoot}>\n        {values.roles.map((role, i) => {\n          return (\n            <li key={i}>\n              <Chip\n                label={role}\n                onDelete={() => handleDeleteChipRoles(role)}\n                onClick={() => handleDeleteChipRoles(role)}\n                className={classes.chip}\n              />\n            </li>\n          );\n        })}\n      </div>\n    );\n  };\n\n\n  const handleDeleteChip = (chip, objProp) => {\n    let newArr = [...formValues[objProp]].filter((item) => item !== chip);\n    setFormValues(Object.assign({}, formValues, { [objProp]: newArr }));\n  };\n\n  const handleDeleteChipRoles = (chip) => {\n    let newArr = [...formValues.roles].filter((item) => item !== chip);\n    setFormValues(Object.assign({}, formValues, { roles: newArr }));\n  };\n  const handleChange = (event, field) => {\n    // copy new values to formValues\n    setFormValues({ ...formValues, [field]: event.target.value });\n  };\n\n  const handleChangeValue = (field, value) => {\n    // copy new values to formValues\n    setFormValues({ ...formValues, [field]: value });\n  };\n\n  React.useEffect(() => {\n    // console.log(formValues);\n    setFormErrors(validate({ ...formValues, image: embed ? true : false }));\n    setNewChips(makeChips(formValues));\n  }, [formValues, embed]);\n\n  const handleSubmit = () => {\n    console.log(formErrors);\n    if (!Object.keys(formErrors).length === 0) {\n      console.log(\"not submitting\");\n      return;\n    }\n    //   alert(JSON.stringify(values, null, 2));\n    console.log(\"submitting data\");\n    let data = {\n      status: \"mtsolution\",\n      index: \"mtsolutions\",\n      q: formValues,\n    };\n    let formData = new FormData();\n\n    formData.append(\"params\", JSON.stringify(data));\n    formData.append(\"image\", image, image.path);\n    const updateData = (data) => dispatch(updateMicrotaskList(data))\n    postProject(formData, authData.key, history, formValues.title, updateData);\n    setOpen(true);\n  };\n\n  const handleEmbed = (url) => {\n    setImage(url[0].file);\n    console.log(url[0].file.path);\n    let reader = new FileReader();\n\n    reader.onloadend = () => {\n      setEmbed(reader.result);\n      console.log(embed);\n    };\n    reader.readAsDataURL(url[0].file);\n  };\n\n \n  return (\n    <React.Fragment>\n      {!open ? (\n        <div className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\">\n          </Typography>\n\n          <form\n            className={classes.form}\n            noValidate\n            onSubmit={(e) => {\n              e.preventDefault();\n              return false;\n            }}\n          >\n            {/* TITLE */}\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                {formErrors.title ? (\n                  <sup className={classes.error}>{formErrors.title}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <TextField\n                  variant=\"standard\"\n                  required\n                  fullWidth\n                  multiline\n                  id=\"title\"\n                  label=\"Solution title\"\n                  name=\"title\"\n                  autoComplete=\"none\"\n                  onChange={(e) => handleChange(e, \"title\")}\n                  value={formValues.title}\n                />\n              </Grid>\n\n              {/* IMAGE EMBED */}\n              <Grid item xs={12}>\n                {formErrors.image ? (\n                  <sup className={classes.error}>{formErrors.image}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ImageUpload onSave={handleEmbed} acceptedFiles={[\"image/jpeg\", \"image/png\", \"image/bmp\"]}/>\n                {embed ? (\n                  <Grid item xs={12}>\n                    <img\n                      src={embed}\n                      alt=\"title-image\"\n                      style={{\n                        maxHeight: \"400px\",\n                        marginTop: \"1rem\",\n                        maxWidth: \"100%\",\n                      }}\n                    />\n                  </Grid>\n                ) : null}\n              </Grid>\n\n              {/* SUBTITLE */}\n\n              <Grid item xs={12}>\n                {formErrors.subtitle ? (\n                  <sup className={classes.error}>{formErrors.subtitle}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <TextField\n                  variant=\"standard\"\n                  required\n                  fullWidth\n                  id=\"subtitle\"\n                  label=\"Subtitle\"\n                  name=\"subtitle\"\n                  onChange={(e) => handleChange(e, \"subtitle\")}\n                  value={formValues.subtitle}\n                />\n              </Grid>\n\n              {/* MOTIVATION               */}\n              {/* <Grid item xs={12}>\n                {formErrors.motivation ? (\n                  <sup className={classes.error}>{formErrors.motivation}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <TextField\n                  variant=\"standard\"\n                  required\n                  fullWidth\n                  id=\"motivation\"\n                  label=\"Motivation\"\n                  name=\"motivation\"\n                  onChange={() =>\n                    handleChange(\"motivation\", event.target.value)\n                  }\n                  value={formValues.motivation}\n                />\n              </Grid> */}\n\n              {/* DESCRIPTION */}\n\n              <Grid item xs={12}>\n                {formErrors.storyText ? (\n                  <sup className={classes.error}>{formErrors.storyText}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <div\n                  style={{ borderBottom: \"1px solid grey\", minHeight: \"4rem\" }}\n                >\n                  <MUIRichTextEditor\n                    label=\"Description *\"\n                    id=\"storyText\"\n                    name=\"storyText\"\n                    controls={[\n                      \"bold\",\n                      \"italic\",\n                      \"underline\",\n                      \"bulletList\",\n                      \"quote\",\n                      \"code\",\n                      \"link\",\n                    ]}\n                    toolbarButtonSize=\"small\"\n                    onChange={(state) =>\n                      handleChangeValue(\n                        \"storyText\",\n                        convertToHTML({\n                          styleToHTML: (style) => {\n                            if (style === \"BOLD\") {\n                              return <span style={{ color: \"blue\" }} />;\n                            }\n                          },\n                          blockToHTML: (block) => {\n                            if (block.type === \"code-block\") {\n                              return <code />;\n                            }\n                          },\n                          entityToHTML: (entity, originalText) => {\n                            try {\n                              new URL(entity.data.url);\n                            } catch (error) {\n                              return (\n                                originalText + \" (\" + entity.data.url + \")\"\n                              );\n                            }\n                            if (entity.type === \"LINK\") {\n                              return (\n                                <a href={entity.data.url} target={\"_blank\"}>\n                                  {originalText}\n                                </a>\n                              );\n                            }\n                            return originalText;\n                          },\n                        })(state.getCurrentContent())\n                      )\n                    }\n                    // value={EditorState.createWithContent(convertFromHTML(formValues.storyText)) }\n                  />\n                </div>\n              </Grid>\n\n              {/* CATEGORY              */}\n              <Grid item xs={12}>\n                {formErrors.category ? (\n                  <sup className={classes.error}>{formErrors.category}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <Autocomplete\n                  id=\"combo-box-demo\"\n                  options={categories}\n                  getOptionLabel={(option) => option.category}\n                  fullWidth\n                  onChange={(_, value) => {\n                    handleChangeValue(\"category\", value ? value.category : \"\");\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Category\"\n                      variant=\"standard\"\n                    />\n                  )}\n                />\n              </Grid>\n\n              {/* ROLES */}\n              <Grid item xs={12}>\n                {formErrors.roles ? (\n                  <sup className={classes.error}>{formErrors.roles}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                {newChips}\n                <Autocomplete\n                  id=\"role\"\n                  options={roles}\n                  getOptionLabel={(option) => option.role}\n                  fullWidth\n                  onChange={(_, value) => {\n                    handleChangeValue(\n                      \"roles\",\n                      value && !formValues.roles.includes(value.role)\n                        ? [...formValues.roles].concat([value.role])\n                        : [...formValues.roles]\n                    );\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Skills needed*\"\n                      variant=\"standard\"\n                    />\n                  )}\n                />\n              </Grid>\n\n              {/* COUNTRY */}\n\n              {/* <Grid item xs={12}>\n                {formErrors.country ? (\n                  <sup className={classes.error}>{formErrors.country}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <Autocomplete\n                  id=\"country\"\n                  options={countries}\n                  getOptionLabel={(option) => option.label}\n                  fullWidth\n                  onChange={(_, value) => {\n                    handleChange(\"country\", value ? value.label : \"\");\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Country*\"\n                      variant=\"standard\"\n                    />\n                  )}\n                />\n              </Grid> */}\n              {/* LINKS */}\n              <Grid item xs={12}>\n                {formErrors.links ? (\n                  <sup className={classes.error}>{formErrors.links}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ChipInput\n                  value={formValues.links}\n                  classes={{\n                    chip: classes.chip,\n                  }}\n                  fullWidth\n                  label=\"Important links (press enter to add more than one link)\"\n                  onAdd={(chip) => {\n                    handleChangeValue(\"links\", [...formValues.links].concat([chip]));\n                  }}\n                  onDelete={(chip, index) => handleDeleteChip(chip, \"links\")}\n                />\n              </Grid>\n\n              {/* BUITWITH */}\n              <Grid item xs={12}>\n                {formErrors.builtWith ? (\n                  <sup className={classes.error}>{formErrors.builtWith}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ChipInput\n                  classes={{\n                    chip: classes.chip,\n                  }}\n                  value={formValues.builtWith}\n                  fullWidth\n                  label=\"Technology (press enter to add more than one technologies)\"\n                  onAdd={(chip) => {\n                    handleChangeValue(\n                      \"builtWith\",\n                      [...formValues.builtWith].concat([chip])\n                    );\n                  }}\n                  onDelete={(chip, index) =>\n                    handleDeleteChip(chip, \"builtWith\")\n                  }\n                />\n              </Grid>\n\n              {/* TAGS/KEYWORDS */}\n              <Grid item xs={12}>\n                {formErrors.keywords ? (\n                  <sup className={classes.error}>{formErrors.keywords}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ChipInput\n                  classes={{\n                    chip: classes.chip,\n                  }}\n                  value={formValues.keywords}\n                  fullWidth\n                  label=\"Tags (press enter to add more than one keyword)\"\n                  onAdd={(chip) => {\n                    handleChangeValue(\n                      \"keywords\",\n                      [...formValues.keywords].concat([chip])\n                    );\n                  }}\n                  onDelete={(chip, index) => handleDeleteChip(chip, \"keywords\")}\n                />\n              </Grid>\n              {/* VIDEO URL */}\n              <Grid item xs={12}>\n                {formErrors.video ? (\n                  <sup className={classes.error}>{formErrors.video}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <TextField\n                  variant=\"standard\"\n                  fullWidth\n                  name=\"videourl\"\n                  label=\"Video url\"\n                  type=\"text\"\n                  id=\"videoUrl\"\n                  autoComplete=\"current-password\"\n                  onChange={(e) => handleChange(e, \"video\")}\n                  value={formValues.videoUrl}\n                />\n              </Grid>\n              {/* EVENTS/HACKATHONS */}\n              {/* <Grid item xs={12}>\n                {formErrors.hackathons ? (\n                  <sup className={classes.error}>{formErrors.hackathons}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ChipInput\n                  value={formValues.hackathons}\n                  fullWidth\n                  classes={{\n                    chip: classes.chip,\n                  }}\n                  label=\"Events/hackathons (press enter to add more than one events/hackathons)\"\n                  onAdd={(chip) => {\n                    handleChange(\n                      \"hackathons\",\n                      [...formValues.hackathons].concat([chip])\n                    );\n                  }}\n                  onDelete={(chip, index) =>\n                    handleDeleteChip(chip, \"hackathons\")\n                  }\n                />\n              </Grid> */}\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.submit}\n              onClick={props.openForm}\n            >\n              Cancel\n            </Button>\n            {authData.error ? (\n              <sub className={classes.error}>{authData.error}</sub>\n            ) : null}\n            <Button\n              onClick={handleSubmit}\n              fullWidth\n              variant=\"contained\"\n              disabled={Object.keys(formErrors)[0] ? true : false}\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Submit\n            </Button>\n            <Grid container justify=\"flex-end\">\n              <Grid item></Grid>\n            </Grid>\n          </form>\n        </div>\n      ) : (\n        <div>\n          <div\n            style={{\n              width: \"100%\",\n              height: \"3rem\",\n              textAlign: \"center\",\n              backgroundColor: \"#061F71\",\n              color: \"white\",\n            }}\n          >\n            <h3>Thank you!</h3>\n          </div>\n          <h5 style={{ fontWeight: 400 }}>Your Microtask has been submitted.</h5>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LongMenu from \"../menu/LongMenu\";\nimport { useDispatch } from \"reactive-react-redux\";\nimport { updateSelectedProject } from \"../redux/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { MATCH_USER } from \"../backend/EsQueries\";\nimport { getImgUrl } from \"../js/utils\";\nimport Link from \"@material-ui/core/Link\";\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\nimport { esAxios } from '../backend/AxiosRequest'\n\nimport { countries } from \"../search/utils\";\n\nfunction countryToIso(country) {\n  let filteredData = countries.filter((d) => d.label === country);\n  if (filteredData[0]){\n    return filteredData[0].code\n  };\n  return \"US\"\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: \"100%\",\n    border: \"1px solid #E8E8E8\",\n    borderRadius: 15,\n  },\n  media: {\n    height: \"8rem\",\n    width: '100%',\n    paddingTop: \"50%\", // 16:9\n  },\n  avatar: {\n    backgroundColor: \"transparent\",\n    width: \"3rem\",\n    height: \"3rem\",\n  },\n  overlay: {\n    position: \"absolute\",\n    top: \"56.25%\",\n    left: \"1.2rem\",\n    color: \"black\",\n    backgroundColor: \"transparent\",\n  },\n  header: {\n    backgroundColor: theme.palette.primary.main,\n    color: \"white\",\n    height: \"0.2rem\",\n  },\n  button: {\n    borderRadius: 20,\n    backgroundColor: theme.palette.secondary.main,\n    textTransform: \"none\",\n    position: \"absolute\",\n    left: \"50%\",\n    textAlign: \"middle\",\n    transform: `translateX(-50%)`,\n    bottom: \"0.8rem\",\n    width: \"9rem\",\n    height: \"2.5rem\",\n  },\n}));\n\nexport default function MicrotaskCard({ r }) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const [checked] = useState(true);\n  const [mouseMoved, setMouseMoved] = useState(false);\n  let query = MATCH_USER(r._source.owners, \"id\");\n  const [currUser, setCurrUser] = React.useState();\n\n  React.useEffect(()=>{\n    esAxios\n    .get(`/q/`, query)\n    .then((response) => {\n      // process response.\n\n      // this.setState({results: response});\n      console.log(response.data.hits);\n      setCurrUser(response.data.hits[0])\n    })\n    .catch((error) => {\n      // catch errors.\n      console.log(error);\n      return error;\n    });\n  }, [])\n  // console.log(r)\n  const handleLearnmore = (selectedProject) => {\n    if (selectedProject && !mouseMoved) {\n      dispatch(updateSelectedProject(selectedProject));\n\n      history.push(\n        \"/\" +\n          selectedProject._source.title.replace(/\\s+/g, \"-\") +\n          \"/\" +\n          selectedProject._id\n      );\n    }\n  };\n\n  return (\n    <Fade\n      in={checked}\n      key={r._id}\n      style={{ transitionDelay: checked ? \"300ms\" : \"0ms\" }}\n    >\n      <Card className={classes.root}>\n        <CardHeader action={<LongMenu r={r} esIndex=\"microtasks\"/>} className={classes.header} />\n        <ButtonBase >\n          <Link\n            onMouseMove={() => setMouseMoved(true)}\n            onMouseDown={() => setMouseMoved(false)}\n            onMouseUp={() => handleLearnmore(r)}\n            style={{ textDecoration: \"none\" }}\n          >\n            <CardMedia\n              className={classes.media}\n              image={getImgUrl(r._source.image)}\n              title=\"\"\n            >\n              {\" \"}\n            </CardMedia>\n            <div className={classes.overlay}></div>\n            <CardHeader\n              title={\n                <span\n                  style={{\n                    fontWeight: 700,\n                    fontSize: 15,\n                    wordBreak: \"break-word\",\n                    hyphens: \"auto\",\n                    lineHeight:'1rem',\n                    display: 'inline-block',\n                  }}\n                >\n                  {r._source.title}\n                </span>\n              }\n              subheader={\n                <span\n                  style={{\n                    wordBreak: \"break-word\",\n                    hyphens: \"auto\",\n                    lineHeight:'1rem',\n                    display: 'inline-block',\n                  }}\n                >\n                {r._source.hackathons[0] ? r._source.hackathons[0] : null}\n                </span>\n              }\n              avatar={\n                <Avatar\n                  title={r._source.country}\n                  aria-label=\"project\"\n                  className={classes.avatar}\n                  src={currUser?currUser._source.avatar:null}\n                >\n                 \n                </Avatar>\n              }\n              style={{ height: \"5rem\", textAlign: \"left\"}}\n            />\n\n            <CardContent\n              title=\"Short description\"\n              style={{ height: \"10rem\", textAlign: \"left\" }}\n            >\n              <Typography\n                variant=\"body2\"\n                color=\"primary\"\n                component=\"div\"\n                style={{ overflow: \"hidden\" }}\n              >\n                {r._source.subtitle.substring(0, 125) + \"...\"}\n              </Typography>\n            </CardContent>\n            <CardActions>\n            <Button\n              variant=\"contained\"\n              onClick={() => handleLearnmore(r)}\n              className={classes.button}\n              disableElevation\n              component='div'\n            >\n              Learn more\n            </Button>\n          </CardActions>\n          </Link>\n        </ButtonBase>\n      </Card>\n    </Fade>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useTrackedState } from 'reactive-react-redux'\nimport { useHistory } from 'react-router-dom'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function MTPlaceholder(props) {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n  const { authData } = useTrackedState();\n  const history = useHistory();\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Lets make your work impactful\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          Microtask\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          A new way of making progress\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Tasks that don't take more than hour from start to finish.\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button onClick={authData.isAuthenticated?props.openForm: ()=>history.push('/sign-in')} variant=\"contained\" fullWidth color=\"secondary\">\n          Add a microtask\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n"],"sourceRoot":""}
{"version":3,"sources":["components/dashBoard/SolutionTab.jsx","components/dashBoard/SolutionHome.jsx"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","Typography","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","width","tabPanel","ProjectTab","classes","useTheme","React","useState","setValue","useTrackedState","authData","solutionList","useHistory","className","AppBar","position","color","Tabs","onChange","event","newValue","indicatorColor","textColor","variant","aria-label","Tab","label","axis","direction","onChangeIndex","dir","selectedProject","Container","Grid","container","item","md","sm","xs","style","margin","textAlign","parseHtml","_source","storyText","ProjectVideo","ProjectLinks","ProjectTech","flexGrow","padding","spacing","text","secondary","appBar","top","bottom","SolutionHome","history","resourceRef","useRef","slide","setSlide","currProject","setCurrProject","setMicrotasks","isFeedback","setIsFeedback","selectedSolution","microtaskList","params","useParams","dispatch","useDispatch","useEffect","mtTitle","query","MATCH_PROJ_ID","_id","simpleQueryElasticsearch","updateMicrotaskList","user","data","q","categoryName","activity","docId","title","projectTitle","projectId","userId","username","createdAt","Date","formData","FormData","append","JSON","stringify","createDoc","key","handleActivity","MATCH_ID_TITLE","queryEsById","updateSelectedSolution","fetchProj","mtsol","replace","upvotes","includes","downvotes","handleScroll","throttle","current","getBoundingClientRect","window","innerHeight","isAuthenticated","addEventListener","removeEventListener","Head","description","subtitle","image","Fragment","TitleSubtitle","ref","Paper","Divider","ListComments","PostComment","Button","href","Slide","in","Toolbar","IconButton","onClick"],"mappings":"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","file":"static/js/16.2e727c34.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useTrackedState } from \"reactive-react-redux\";\nimport SolutionCard from \"./SolutionCard\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport {useHistory} from 'react-router-dom'\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport parseHtml from \"html-react-parser\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport ProjectLinks from \"./ProjectLinks\";\nimport ProjectVideo from \"./ProjectVideo\";\nimport ProjectTech from \"./ProjectTech\";\nimport SolutionForm from \"./SolutionForm\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport MTCarousel from \"./MTCarousel\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxOutlinedIcon from \"@material-ui/icons/CheckBoxOutlined\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\nimport Button from \"@material-ui/core/Button\";\nimport Badge from '@material-ui/core/Badge';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    \"aria-controls\": `full-width-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    width: \"100%\",\n  },\n  tabPanel: {\n    backgroundColor: \"white\",\n  },\n}));\n\nexport default function ProjectTab(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n  const { authData, solutionList } = useTrackedState();\n  const [openForm, setOpenForm] = React.useState(false);\n  const history = useHistory()\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index) => {\n    setValue(index);\n  };\n\n  const handleOpenForm = () => {\n    if(!authData.isAuthenticated){\n      history.push(\"/sign-in\")\n      return\n    }\n    setOpenForm(!openForm);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n        >\n          <Tab label=\"Details\" {...a11yProps(0)} />\n          {/* <Tab label=\"More\" {...a11yProps(1)} /> */}\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n     \n        <TabPanel\n          value={value}\n          index={0}\n          dir={theme.direction}\n          className={classes.tabPanel}\n        >\n           {props.selectedProject ? (\n            <Container>\n              <Grid\n                container\n\n                // left: \"50%\",\n                // transform: `translateX(-50%)`,\n              >\n                <Grid item md={12} sm={12} xs={12}>\n                  <h4 style={{ margin: \"0 auto\", textAlign: \"left\" }}>\n                    Solution details\n                  </h4>\n                  <hr></hr>\n                  <Typography variant=\"body1\">\n                    {parseHtml(\n                      props.selectedProject\n                        ? props.selectedProject._source.storyText\n                        : null\n                    )}\n                  </Typography>\n                </Grid>\n                <Grid item sm={12} md={12} xs={12}>\n                  <h2>Files</h2>\n                </Grid>\n                <Grid item sm={12} md={6} xs={12}>\n                  <ProjectVideo selectedProject={props.selectedProject} />\n                </Grid>\n                <Grid item sm={12} md={6} xs={12}>\n                  <ProjectLinks selectedProject={props.selectedProject} />\n                  <ProjectTech selectedProject={props.selectedProject} />\n                </Grid>\n              </Grid>\n            </Container>\n          ) : null}\n          \n        </TabPanel>\n        {/* <TabPanel\n          value={value}\n          index={1}\n          dir={theme.direction}\n          className={classes.tabPanel}\n        >\n         <Container>\n          <h4 style={{ margin: \"0 auto\", textAlign: \"left\" }}>Submitted solutions</h4>\n          <hr></hr>\n          <Grid container spacing={1}>\n            <Grid item sm={12} md={12} xs={12}>\n            <AddOutlinedIcon style={{marginRight:'0.6rem'}}/>\n              <Button\n                onClick={handleOpenForm}\n                variant=\"text\"\n                style={{textTransform:'none', fontWeight:700, fontSize:'1.2rem'}}\n              >\n                {\"  \"}\n                Submit a solution\n              </Button>\n            </Grid>\n            <Collapse in={openForm} timeout=\"auto\" unmountOnExit>\n              <Grid item sm={12} md={12} xs={12}>\n                <SolutionForm\n                  openForm={handleOpenForm}\n                  selectedProject={props.selectedProject}\n                />\n              </Grid>\n            </Collapse>\n            <Grid item sm={12} md={12} xs={12}>\n              {solutionList &&\n                solutionList[0] &&\n                solutionList.map((r, i) => <SolutionCard key={i} r={r} />)}\n            </Grid>\n\n          </Grid>\n          </Container>\n        </TabPanel> */}\n      </SwipeableViews>\n    </div>\n  );\n}\n","import { useDispatch, useTrackedState } from \"reactive-react-redux\";\nimport React, { useEffect, useRef } from \"react\";\nimport { MATCH_ID_TITLE } from \"../backend/EsQueries\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { queryEsById, createDoc } from \"../backend/AxiosRequest\";\nimport { updateSelectedSolution, updateMicrotaskList } from \"../redux/actions\";\nimport TitleSubtitle from \"./TitleSubtitle\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\nimport SolutionTab from \"./SolutionTab\";\n\nimport PostComment from \"./PostComment\";\nimport ListComments from \"./ListComments\";\nimport { Button, IconButton } from \"@material-ui/core\";\n\nimport Box from \"@material-ui/core/Box\";\nimport { simpleQueryElasticsearch } from \"../backend/AxiosRequest\";\nimport { MATCH_PROJ_ID } from \"../backend/EsQueries\";\nimport throttle from \"lodash.throttle\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Head from \"../meta/Head\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    color: theme.palette.text.secondary,\n  },\n  appBar: {\n    top: \"auto\",\n    bottom: 0,\n  },\n}));\n\nexport default function SolutionHome() {\n  const classes = useStyles();\n  const history = useHistory();\n  const resourceRef = useRef(null);\n  const [slide, setSlide] = React.useState(false);\n  const [currProject, setCurrProject] = React.useState();\n  const [microtasks, setMicrotasks] = React.useState();\n  const [isFeedback, setIsFeedback] = React.useState(true);\n  const { selectedSolution, authData, microtaskList } = useTrackedState();\n\n  let params = useParams();\n  const dispatch = useDispatch();\n  const handleClose = () => {\n    setSlide(false);\n  };\n  const fetchProj = (id, title, index) => {\n    let query = MATCH_ID_TITLE(id, title, index);\n    queryEsById(query, dispatch, updateSelectedSolution, history);\n  };\n\n  function handleActivity() {\n    let data = {\n      index: \"activity\",\n      q: {\n        categoryName: \"solution\",\n        activity: \"visited\",\n        docId: selectedSolution._id,\n        title: selectedSolution._source.title,\n        projectTitle:selectedSolution._source.projectTitle,\n        projectId:selectedSolution._source.projectId,\n        userId: authData.user.id,\n        username: authData.user.username,\n        createdAt: new Date(),\n      },\n    };\n    let formData = new FormData();\n\n    formData.append(\"params\", JSON.stringify(data));\n\n    createDoc(formData, authData.key, null);\n  }\n\n  useEffect(() => {\n    if (!selectedSolution || !selectedSolution._source.mtTitle) {\n      fetchProj(params.id, params.mtsol.replace(/-/g, \" \"), \"solutions\");\n    } else {\n      const query = MATCH_PROJ_ID(selectedSolution._id, \"solutions\");\n      simpleQueryElasticsearch(query, dispatch, updateMicrotaskList);\n      if (authData && authData.user) {\n        handleActivity();\n      }\n    }\n    setCurrProject(selectedSolution);\n    setIsFeedback(\n      authData._source && selectedSolution && selectedSolution._source.upvotes\n        ? !selectedSolution._source.upvotes.includes(authData._source.id) &&\n            !selectedSolution._source.downvotes.includes(authData._source.id)\n        : null\n    );\n  }, [selectedSolution]);\n  const handleScroll = throttle(() => {\n    if (resourceRef && resourceRef.current && isFeedback) {\n      if (\n        resourceRef.current.getBoundingClientRect().top <\n        (window.innerHeight * 1) / 2\n      ) {\n        if (authData.isAuthenticated) {\n        }\n        setSlide(true);\n      } else {\n        // setSlide(false)\n      }\n    }\n  }, 100);\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    setMicrotasks(microtaskList);\n  }, [microtaskList]);\n\n  return (\n    <Box>\n      <Head\n        title={\n          currProject\n            ? currProject._source.projectTitle +\n              \": \" +\n              currProject._source.title +\n              \" - CivicTechHub\"\n            : null\n        }\n        description={currProject ? currProject._source.subtitle : null}\n        image={currProject ? currProject._source.image : null}\n      />\n      {currProject ? (\n        <React.Fragment>\n              \n          <TitleSubtitle selectedProject={currProject} />\n          <SolutionTab selectedProject={currProject}/>\n          <Container>\n            <Grid container spacing={2}>\n              <Grid item sm={12} xs={12} ref={resourceRef}>\n                <Paper className={classes.paper}>\n                  <h4>Comments</h4>\n                  <Divider />\n                  {params.id ? (\n                    <React.Fragment>\n                      <ListComments projectId={params.id} />\n                      <Divider />\n                    </React.Fragment>\n                  ) : null}\n\n                  {authData.isAuthenticated && params.id ? (\n                    <PostComment projectId={params.id} />\n                  ) : (\n                    <h5>\n                      Please <Button href=\"/sign-in\">sign in </Button> to post\n                      comments\n                    </h5>\n                  )}\n                </Paper>\n              </Grid>\n            </Grid>\n          </Container>\n        </React.Fragment>\n      ) : null}\n      {isFeedback ? (\n        <Slide in={slide} direction=\"up\">\n          <AppBar position=\"fixed\" color=\"secondary\" className={classes.appBar}>\n            <Toolbar>\n              <Container>\n                <Grid container spacing={2}>\n                  <Grid item sm={6} md={6} xs={12}>\n                    <h3>Do you like this project? </h3>\n                  </Grid>\n                  <Grid item sm={6} md={6} xs={12}>\n                    Your feedback will help us to identify the most promising\n                    projects. Thank you!\n                  </Grid>\n                </Grid>\n              </Container>\n              <IconButton onClick={handleClose}>\n                <CloseIcon />\n              </IconButton>\n            </Toolbar>\n          </AppBar>\n        </Slide>\n      ) : null}\n    </Box>\n  );\n}\n"],"sourceRoot":""}
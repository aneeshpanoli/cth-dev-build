{"version":3,"sources":["components/create/ProjectSubmitForm.jsx"],"names":["useStyles","makeStyles","theme","chipRoot","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","variant","height","color","palette","primary","main","border","paper","marginTop","flexDirection","alignItems","avatar","backgroundColor","secondary","form","width","marginBottom","submit","maxWidth","error","backdrop","zIndex","drawer","ProjectForm","React","useState","formErrors","setFormErrors","history","useHistory","classes","authData","useTrackedState","useEffect","user","push","useDispatch","open","setOpen","embed","setEmbed","image","setImage","newChips","setNewChips","builtWith","category","country","createdAt","Date","storyText","subtitle","owners","id","video","hackathons","updatedAt","links","keywords","title","roles","motivation","rewards","crisis","language","approved","claimed","formValues","setFormValues","handleDeleteChip","objProp","newArr","filter","item","Object","assign","handleDeleteChipRoles","handleChange","event","field","target","value","handleChangeValue","values","errors","length","test","URL","slice","validate","makeChips","className","map","role","i","key","label","onDelete","onClick","component","style","textAlign","fontWeight","noValidate","onSubmit","e","preventDefault","container","xs","required","fullWidth","multiline","name","autoComplete","onChange","onSave","url","file","console","log","path","reader","FileReader","onloadend","result","readAsDataURL","acceptedFiles","src","alt","maxHeight","borderBottom","minHeight","controls","toolbarButtonSize","state","convertToHTML","styleToHTML","blockToHTML","block","type","entityToHTML","entity","originalText","data","href","getCurrentContent","options","categories","getOptionLabel","option","_","renderInput","params","includes","concat","countries","onAdd","index","videoUrl","keys","status","q","formData","FormData","append","JSON","stringify","postProject","disabled","justify"],"mappings":"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","file":"static/js/15.8d06fd71.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useDispatch, useTrackedState } from \"reactive-react-redux\";\nimport { postProject } from \"../backend/AxiosRequest\";\nimport MUIRichTextEditor from \"mui-rte\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { countries, categories, roles } from \"../search/utils\";\nimport ImageUpload from \"./ImageUpload\";\nimport { convertToHTML } from \"draft-convert\";\nimport ChipInput from \"material-ui-chip-input\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst useStyles = makeStyles((theme) => ({\n  chipRoot: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n    variant: \"outlined\",\n    height: \"1.5rem\",\n    color: theme.palette.primary.main,\n    border: \"1px solid\",\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 1, 2),\n    maxWidth: \"8rem\",\n  },\n  error: {\n    color: \"red\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n}));\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.title) {\n    errors.title = \"Required\";\n  } else if (values.title.length < 4) {\n    errors.title = \"The title should be atleast 4 characters long\";\n  } else if (values.title.length > 60) {\n    errors.title = \"The title should be less than 60 characters\";\n  } else if (/[*._%+-?]+/i.test(values.title)) {\n    errors.title = \"Invalid characters in the title*\";\n  }\n\n  if (!values.subtitle) {\n    errors.subtitle = \"Required\";\n  } else if (values.subtitle.length < 60) {\n    errors.subtitle = \"The description should be atleast 60 characters long\";\n  }\n\n  if (!values.motivation) {\n    errors.motivation = \"Required\";\n  } else if (values.motivation.length < 60) {\n    errors.motivation = \"The description should be atleast 60 characters long\";\n  }\n\n  if (!values.storyText) {\n    errors.storyText = \"Required\";\n  } else if (values.storyText.length < 60) {\n    errors.storyText = \"The description should be atleast 60 characters long\";\n  }\n\n  if (!values.category) {\n    errors.category = \"Required\";\n  }\n\n  if (values.roles.length === 0 || !values.roles) {\n    errors.roles = \"Required\";\n  }\n\n  if (values.links && values.links.length > 0) {\n    try {\n      new URL(values.links.slice(-1));\n    } catch (error) {\n      errors.links = \"Not a valid url\";\n    }\n  }\n\n  if (values.video) {\n    try {\n      new URL(values.video);\n    } catch (error) {\n      errors.video = \"Not a valid url\";\n    }\n  }\n\n  if (values.keywords.length === 0 || !values.keywords) {\n    errors.keywords = \"Required\";\n  }\n\n  if (values.builtWith.length === 0 || !values.builtWith) {\n    errors.builtWith = \"Required\";\n  }\n\n  if (!values.country) {\n    errors.country = \"Required\";\n  }\n\n  if (!values.image) {\n    errors.image = \"Required\";\n  }\n\n  return errors;\n};\n\nexport default function ProjectForm() {\n  const [formErrors, setFormErrors] = React.useState({});\n  const history = useHistory();\n  const classes = useStyles();\n  const { authData } = useTrackedState();\n  React.useEffect(() => {\n    if (!authData.user) {\n      history.push(\"/\");\n    }\n  });\n\n  const dispatch = useDispatch();\n  const [open, setOpen] = React.useState(false);\n  const [embed, setEmbed] = React.useState(null);\n  const [image, setImage] = React.useState(null);\n\n  const [newChips, setNewChips] = React.useState(null);\n  const [formValues, setFormValues] = React.useState({\n    builtWith: [],\n    category: \"\",\n    country: \"\",\n    createdAt: new Date(),\n    storyText: \"\",\n    subtitle: \"\",\n    owners: authData && authData.user ? authData.user.id : \"\",\n    video: \"\",\n    hackathons: [],\n    updatedAt: new Date(),\n    links: [],\n    keywords: [],\n    title: \"\",\n    roles: [],\n    motivation: \"\",\n    rewards: \"\",\n    crisis: \"\",\n    language: \"\",\n    approved: \"no\",\n    claimed: \"yes\",\n  });\n\n  const handleDeleteChip = (chip, objProp) => {\n    let newArr = [...formValues[objProp]].filter((item) => item !== chip);\n    setFormValues(Object.assign({}, formValues, { [objProp]: newArr }));\n  };\n\n  const handleDeleteChipRoles = (chip) => {\n    let newArr = [...formValues.roles].filter((item) => item !== chip);\n    setFormValues(Object.assign({}, formValues, { roles: newArr }));\n  };\n  const handleChange = (event, field) => {\n    // copy new values to formValues\n    setFormValues({ ...formValues, [field]: event.target.value });\n  };\n\n  const handleChangeValue = (field, value) => {\n    // copy new values to formValues\n    setFormValues({ ...formValues, [field]: value });\n  };\n\n  React.useEffect(() => {\n    // console.log(formValues);\n    setFormErrors(validate({ ...formValues, image: embed ? true : false }));\n    setNewChips(makeChips(formValues));\n  }, [formValues, embed]);\n\n  const handleSubmit = () => {\n    console.log(formErrors);\n    if (!Object.keys(formErrors).length === 0) {\n      console.log(\"not submitting\");\n      return;\n    }\n    //   alert(JSON.stringify(values, null, 2));\n    console.log(\"submitting data\");\n    let data = {\n      status: \"projectnew\",\n      index: \"projectnew\",\n      q: formValues,\n    };\n    let formData = new FormData();\n\n    formData.append(\"params\", JSON.stringify(data));\n    formData.append(\"image\", image, image.path);\n\n    postProject(formData, authData.key, history, formValues.title);\n    setOpen(true);\n  };\n\n  const handleEmbed = (url) => {\n    setImage(url[0].file);\n    console.log(url[0].file.path);\n    let reader = new FileReader();\n\n    reader.onloadend = () => {\n      setEmbed(reader.result);\n      console.log(embed);\n    };\n    reader.readAsDataURL(url[0].file);\n  };\n\n  const makeChips = (values) => {\n    return (\n      <div className={classes.chipRoot}>\n        {values.roles.map((role, i) => {\n          return (\n            <li key={i}>\n              <Chip\n                label={role}\n                onDelete={() => handleDeleteChipRoles(role)}\n                onClick={() => handleDeleteChipRoles(role)}\n                className={classes.chip}\n              />\n            </li>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <CssBaseline />\n      {!open ? (\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Create A Project\n          </Typography>\n\n          <form\n            className={classes.form}\n            noValidate\n            onSubmit={(e) => {\n              e.preventDefault();\n              return false;\n            }}\n          >\n            {/* TITLE */}\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                {formErrors.title ? (\n                  <sup className={classes.error}>{formErrors.title}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <TextField\n                  variant=\"standard\"\n                  required\n                  fullWidth\n                  multiline\n                  id=\"title\"\n                  label=\"Project title\"\n                  name=\"title\"\n                  autoComplete=\"none\"\n                  onChange={(e) => handleChange(e, \"title\")}\n                  value={formValues.title}\n                />\n              </Grid>\n\n              {/* IMAGE EMBED */}\n              <Grid item xs={12}>\n                {formErrors.image ? (\n                  <sup className={classes.error}>{formErrors.image}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ImageUpload\n                  onSave={handleEmbed}\n                  acceptedFiles={[\"image/jpeg\", \"image/png\", \"image/bmp\"]}\n                />\n                {embed ? (\n                  <Grid item xs={12}>\n                    <img\n                      src={embed}\n                      alt=\"title-image\"\n                      style={{\n                        maxHeight: \"400px\",\n                        marginTop: \"1rem\",\n                        maxWidth: \"100%\",\n                      }}\n                    />\n                  </Grid>\n                ) : null}\n              </Grid>\n\n              {/* SUBTITLE */}\n\n              <Grid item xs={12}>\n                {formErrors.subtitle ? (\n                  <sup className={classes.error}>{formErrors.subtitle}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <TextField\n                  variant=\"standard\"\n                  required\n                  fullWidth\n                  id=\"subtitle\"\n                  label=\"Subtitle\"\n                  name=\"subtitle\"\n                  onChange={(e) => handleChange(e, \"subtitle\")}\n                  value={formValues.subtitle}\n                />\n              </Grid>\n\n              {/* MOTIVATION               */}\n              <Grid item xs={12}>\n                {formErrors.motivation ? (\n                  <sup className={classes.error}>{formErrors.motivation}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <TextField\n                  variant=\"standard\"\n                  required\n                  fullWidth\n                  id=\"motivation\"\n                  label=\"Motivation\"\n                  name=\"motivation\"\n                  onChange={(e) => handleChange(e, \"motivation\")}\n                  value={formValues.motivation}\n                />\n              </Grid>\n\n              {/* DESCRIPTION */}\n\n              <Grid item xs={12}>\n                {formErrors.storyText ? (\n                  <sup className={classes.error}>{formErrors.storyText}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <div\n                  style={{ borderBottom: \"1px solid grey\", minHeight: \"4rem\" }}\n                >\n                  <MUIRichTextEditor\n                    label=\"Description *\"\n                    id=\"storyText\"\n                    name=\"storyText\"\n                    controls={[\n                      \"bold\",\n                      \"italic\",\n                      \"underline\",\n                      \"bulletList\",\n                      \"quote\",\n                      \"code\",\n                      \"link\",\n                    ]}\n                    toolbarButtonSize=\"small\"\n                    onChange={(state) =>\n                      handleChangeValue(\n                        \"storyText\",\n                        convertToHTML({\n                          styleToHTML: (style) => {\n                            if (style === \"BOLD\") {\n                              return <span style={{ color: \"blue\" }} />;\n                            }\n                          },\n                          blockToHTML: (block) => {\n                            if (block.type === \"code-block\") {\n                              return <code />;\n                            }\n                          },\n                          entityToHTML: (entity, originalText) => {\n                            try {\n                              new URL(entity.data.url);\n                            } catch (error) {\n                              return (\n                                originalText + \" (\" + entity.data.url + \")\"\n                              );\n                            }\n                            if (entity.type === \"LINK\") {\n                              return (\n                                <a href={entity.data.url} target={\"_blank\"}>\n                                  {originalText}\n                                </a>\n                              );\n                            }\n                            return originalText;\n                          },\n                        })(state.getCurrentContent())\n                      )\n                    }\n                    // value={EditorState.createWithContent(convertFromHTML(formValues.storyText)) }\n                  />\n                </div>\n              </Grid>\n\n              {/* CATEGORY              */}\n              <Grid item xs={12}>\n                {formErrors.category ? (\n                  <sup className={classes.error}>{formErrors.category}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <Autocomplete\n                  id=\"combo-box-demo\"\n                  options={categories}\n                  getOptionLabel={(option) => option.category}\n                  fullWidth\n                  onChange={(_, value) => {\n                    handleChangeValue(\"category\", value ? value.category : \"\");\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Category\"\n                      variant=\"standard\"\n                    />\n                  )}\n                />\n              </Grid>\n\n              {/* ROLES */}\n              <Grid item xs={12}>\n                {formErrors.roles ? (\n                  <sup className={classes.error}>{formErrors.roles}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                {newChips}\n                <Autocomplete\n                  id=\"role\"\n                  options={roles}\n                  getOptionLabel={(option) => option.role}\n                  fullWidth\n                  onChange={(_, value) => {\n                    handleChangeValue(\n                      \"roles\",\n                      value && !formValues.roles.includes(value.role)\n                        ? [...formValues.roles].concat([value.role])\n                        : [...formValues.roles]\n                    );\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Roles needed*\"\n                      variant=\"standard\"\n                    />\n                  )}\n                />\n              </Grid>\n\n              {/* COUNTRY */}\n\n              <Grid item xs={12}>\n                {formErrors.country ? (\n                  <sup className={classes.error}>{formErrors.country}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <Autocomplete\n                  id=\"country\"\n                  options={countries}\n                  getOptionLabel={(option) => option.label}\n                  fullWidth\n                  onChange={(_, value) => {\n                    handleChangeValue(\"country\", value ? value.label : \"\");\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Country*\"\n                      variant=\"standard\"\n                    />\n                  )}\n                />\n              </Grid>\n              {/* LINKS */}\n              <Grid item xs={12}>\n                {formErrors.links ? (\n                  <sup className={classes.error}>{formErrors.links}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ChipInput\n                  value={formValues.links}\n                  classes={{\n                    chip: classes.chip,\n                  }}\n                  fullWidth\n                  label=\"Important links (press enter to add more than one link)\"\n                  onAdd={(chip) => {\n                    handleChangeValue(\n                      \"links\",\n                      [...formValues.links].concat([chip])\n                    );\n                  }}\n                  onDelete={(chip, index) => handleDeleteChip(chip, \"links\")}\n                />\n              </Grid>\n\n              {/* BUITWITH */}\n              <Grid item xs={12}>\n                {formErrors.builtWith ? (\n                  <sup className={classes.error}>{formErrors.builtWith}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ChipInput\n                  classes={{\n                    chip: classes.chip,\n                  }}\n                  value={formValues.builtWith}\n                  fullWidth\n                  label=\"Technology (press enter to add more than one technologies)\"\n                  onAdd={(chip) => {\n                    handleChangeValue(\n                      \"builtWith\",\n                      [...formValues.builtWith].concat([chip])\n                    );\n                  }}\n                  onDelete={(chip, index) =>\n                    handleDeleteChip(chip, \"builtWith\")\n                  }\n                />\n              </Grid>\n\n              {/* TAGS/KEYWORDS */}\n              <Grid item xs={12}>\n                {formErrors.keywords ? (\n                  <sup className={classes.error}>{formErrors.keywords}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ChipInput\n                  classes={{\n                    chip: classes.chip,\n                  }}\n                  value={formValues.keywords}\n                  fullWidth\n                  label=\"Tags (press enter to add more than one keyword)\"\n                  onAdd={(chip) => {\n                    handleChangeValue(\n                      \"keywords\",\n                      [...formValues.keywords].concat([chip])\n                    );\n                  }}\n                  onDelete={(chip, index) => handleDeleteChip(chip, \"keywords\")}\n                />\n              </Grid>\n              {/* VIDEO URL */}\n              <Grid item xs={12}>\n                {formErrors.video ? (\n                  <sup className={classes.error}>{formErrors.video}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <TextField\n                  variant=\"standard\"\n                  fullWidth\n                  name=\"videourl\"\n                  label=\"Video url\"\n                  type=\"text\"\n                  id=\"videoUrl\"\n                  autoComplete=\"current-password\"\n                  onChange={() => handleChange(\"video\")}\n                  value={formValues.videoUrl}\n                />\n              </Grid>\n              {/* EVENTS/HACKATHONS */}\n              <Grid item xs={12}>\n                {formErrors.hackathons ? (\n                  <sup className={classes.error}>{formErrors.hackathons}</sup>\n                ) : (\n                  <sup className={classes.error}>{\"\"}</sup>\n                )}\n                <ChipInput\n                  value={formValues.hackathons}\n                  fullWidth\n                  classes={{\n                    chip: classes.chip,\n                  }}\n                  label=\"Events/hackathons (press enter to add more than one events/hackathons)\"\n                  onAdd={(chip) => {\n                    handleChangeValue(\n                      \"hackathons\",\n                      [...formValues.hackathons].concat([chip])\n                    );\n                  }}\n                  onDelete={(chip, index) =>\n                    handleDeleteChip(chip, \"hackathons\")\n                  }\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.submit}\n            >\n              Cancel\n            </Button>\n            {authData.error ? (\n              <sub className={classes.error}>{authData.error}</sub>\n            ) : null}\n            <Button\n              onClick={handleSubmit}\n              fullWidth\n              variant=\"contained\"\n              disabled={Object.keys(formErrors)[0] ? true : false}\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Submit\n            </Button>\n            <Grid container justify=\"flex-end\">\n              <Grid item></Grid>\n            </Grid>\n          </form>\n        </div>\n      ) : (\n        <div>\n          <div\n            style={{\n              width: \"100%\",\n              height: \"3rem\",\n              textAlign: \"center\",\n              backgroundColor: \"#061F71\",\n              color: \"white\",\n            }}\n          >\n            <h3>Thank you!</h3>\n          </div>\n          <h5 style={{ fontWeight: 400 }}>Your project has been submitted.</h5>\n        </div>\n      )}\n    </Container>\n  );\n}\n"],"sourceRoot":""}